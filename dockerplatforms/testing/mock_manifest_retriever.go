// Code generated by MockGen. DO NOT EDIT.
// Source: manifest_retriever.go
//
// Generated by this command:
//
//	mockgen -source=manifest_retriever.go -destination=testing/mock_manifest_retriever.go -package=dockerplatformstesting
//

// Package dockerplatformstesting is a generated GoMock package.
package dockerplatformstesting

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockManifestRetriever is a mock of ManifestRetriever interface.
type MockManifestRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockManifestRetrieverMockRecorder
}

// MockManifestRetrieverMockRecorder is the mock recorder for MockManifestRetriever.
type MockManifestRetrieverMockRecorder struct {
	mock *MockManifestRetriever
}

// NewMockManifestRetriever creates a new mock instance.
func NewMockManifestRetriever(ctrl *gomock.Controller) *MockManifestRetriever {
	mock := &MockManifestRetriever{ctrl: ctrl}
	mock.recorder = &MockManifestRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifestRetriever) EXPECT() *MockManifestRetrieverMockRecorder {
	return m.recorder
}

// GetManifest mocks base method.
func (m *MockManifestRetriever) GetManifest(ctx context.Context, image string) ([]byte, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManifest", ctx, image)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManifest indicates an expected call of GetManifest.
func (mr *MockManifestRetrieverMockRecorder) GetManifest(ctx, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifest", reflect.TypeOf((*MockManifestRetriever)(nil).GetManifest), ctx, image)
}
