// Code generated by MockGen. DO NOT EDIT.
// Source: inspect.go
//
// Generated by this command:
//
//	mockgen -source=inspect.go -destination=testing/mock_inspect.go -package=dockerplatformstesting
//

// Package dockerplatformstesting is a generated GoMock package.
package dockerplatformstesting

import (
	context "context"
	reflect "reflect"

	digest "github.com/opencontainers/go-digest"
	dockerplatforms "github.com/wantedly/container-platform-tools/dockerplatforms"
	gomock "go.uber.org/mock/gomock"
)

// MockPlatformInspector is a mock of PlatformInspector interface.
type MockPlatformInspector struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformInspectorMockRecorder
}

// MockPlatformInspectorMockRecorder is the mock recorder for MockPlatformInspector.
type MockPlatformInspectorMockRecorder struct {
	mock *MockPlatformInspector
}

// NewMockPlatformInspector creates a new mock instance.
func NewMockPlatformInspector(ctrl *gomock.Controller) *MockPlatformInspector {
	mock := &MockPlatformInspector{ctrl: ctrl}
	mock.recorder = &MockPlatformInspectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlatformInspector) EXPECT() *MockPlatformInspectorMockRecorder {
	return m.recorder
}

// GetPlatforms mocks base method.
func (m *MockPlatformInspector) GetPlatforms(ctx context.Context, image string) ([]dockerplatforms.DockerPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatforms", ctx, image)
	ret0, _ := ret[0].([]dockerplatforms.DockerPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatforms indicates an expected call of GetPlatforms.
func (mr *MockPlatformInspectorMockRecorder) GetPlatforms(ctx, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatforms", reflect.TypeOf((*MockPlatformInspector)(nil).GetPlatforms), ctx, image)
}

// MocknamedTaggedDigested is a mock of namedTaggedDigested interface.
type MocknamedTaggedDigested struct {
	ctrl     *gomock.Controller
	recorder *MocknamedTaggedDigestedMockRecorder
}

// MocknamedTaggedDigestedMockRecorder is the mock recorder for MocknamedTaggedDigested.
type MocknamedTaggedDigestedMockRecorder struct {
	mock *MocknamedTaggedDigested
}

// NewMocknamedTaggedDigested creates a new mock instance.
func NewMocknamedTaggedDigested(ctrl *gomock.Controller) *MocknamedTaggedDigested {
	mock := &MocknamedTaggedDigested{ctrl: ctrl}
	mock.recorder = &MocknamedTaggedDigestedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknamedTaggedDigested) EXPECT() *MocknamedTaggedDigestedMockRecorder {
	return m.recorder
}

// Digest mocks base method.
func (m *MocknamedTaggedDigested) Digest() digest.Digest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Digest")
	ret0, _ := ret[0].(digest.Digest)
	return ret0
}

// Digest indicates an expected call of Digest.
func (mr *MocknamedTaggedDigestedMockRecorder) Digest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Digest", reflect.TypeOf((*MocknamedTaggedDigested)(nil).Digest))
}

// Name mocks base method.
func (m *MocknamedTaggedDigested) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MocknamedTaggedDigestedMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MocknamedTaggedDigested)(nil).Name))
}

// String mocks base method.
func (m *MocknamedTaggedDigested) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MocknamedTaggedDigestedMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MocknamedTaggedDigested)(nil).String))
}

// Tag mocks base method.
func (m *MocknamedTaggedDigested) Tag() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(string)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MocknamedTaggedDigestedMockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MocknamedTaggedDigested)(nil).Tag))
}
